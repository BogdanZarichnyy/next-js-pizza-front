generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client"
  // output   = "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
  createAt         DateTime          @default(now())
  updateAt         DateTime          @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  ingredients Ingredient[]
  items       ProductItem[]
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
}

model Ingredient {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  products  Product[]
  cartItems CartItem[]
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @unique
  items       CartItem[]
  totalAmount Int        @default(0)
  token       String
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
}

model CartItem {
  id            Int          @id @default(autoincrement())
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  quantity      Int          @default(1)
  ingredients   Ingredient[]
  createAt      DateTime     @default(now())
  updateAt      DateTime     @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  token       String
  totalAmount Int
  status      OrderStatus @default(PENDING)
  paymentId   String?
  items       Json
  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
}

model Story {
  id              Int         @id @default(autoincrement())
  previewImageUrl String
  items           StoryItem[]
  createdAt       DateTime    @default(now())
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  storyId   Int
  story     Story    @relation(fields: [storyId], references: [id])
  sourceUrl String
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model VerificationCode {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int      @unique
  code     String
  createAt DateTime @default(now())

  @@unique([userId, code])
}
