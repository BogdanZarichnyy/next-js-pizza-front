import { NextRequest, NextResponse } from "next/server";
import { PaymentCallbackDataFondyType } from "../../../../@types/fondy";
import { prisma } from "../../../../prisma/prisma-client";
import { OrderStatus } from "@prisma/client";
import { CartItemDTO } from "../../../../shared/servises/dto/cart.dto";
import { sendEmail } from "../../../../shared/lib";
import { OrderSuccessTemplate } from "../../../../shared/components/shared/email-templates/order-success-template";
import { ReactNode } from "react";
import crypto from "crypto";

export async function POST(req: NextRequest) {
  console.log('NextRequest POST', req.headers);
  
  try {
    let body: PaymentCallbackDataFondyType | Record<string, string> | string;
    const contentType = req.headers.get('content-type') || '';

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —â–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø–∞—Ä—Å–∏–Ω–≥—É —Ü–∏—Ö –¥–∞–Ω–∏—Ö
    if (contentType.includes('application/json')) {
      body = (await req.json()) as PaymentCallbackDataFondyType;
    } else if (contentType.includes('application/x-www-form-urlencoded')) {
      const text = await req.text();
      const form = new URLSearchParams(text);
      body = Object.fromEntries(form.entries()) as Record<string, string>;
      return NextResponse.json({ error: "Fondy: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ" });
    } else {
      body = await req.text() as string;
      return NextResponse.json({ error: "Fondy: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ" });
    }

    console.log("[Checkout Callback] Parsed body:", body);

    // const FONDY_SECRET_KEY = process.env.FONDY_TEST_SECRET_KEY as string; // –≤–ª–∞—Å–Ω–∏–π –∫–ª—é—á –¥–ª—è sandbox
    const FONDY_SECRET_KEY = process.env.FONDY_TEST_SECRET_KEY as string; // —Ç–µ—Å—Ç–æ–≤–∏–π "test" –¥–ª—è sandbox

    // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –ø–ª–∞—Ç–µ–∂—É, —â–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è —â–æ —Ü–µ —Å–∞–º–µ —Ç–æ–π –ø–ª–∞—Ç—ñ–∂ —è–∫–∏–π –±—É–ª–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ –Ω–∞—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    // —è–∫—â–æ —Ü—å–æ–≥–æ –Ω–µ –∑—Ä–æ–±–∏—Ç–∏, —Ç–æ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –ë–î —Ñ–µ–π–∫–æ–≤–∏–π –ø–ª–∞—Ç—ñ–∂
    if (!body.response_signature_string || !body.signature) { // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–∏
      return NextResponse.json({ error: "Signature is not found" });
    } else {
      const signatureString = body.response_signature_string.replace(/\*+/g, FONDY_SECRET_KEY);
      const hash = crypto
        .createHash("sha1")
        .update(signatureString, "utf8") // –∫–æ–¥—É–≤–∞–Ω–Ω—è "utf8" –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, –∞–ª–µ –º–æ–∂–Ω–∞ —ñ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–≤–∞—Ç–∏—Å—è
        .digest("hex");
      
      console.log("Fondy check:", { hash, signature: body.signature });

      if (hash.toLowerCase() !== body.signature.toLowerCase()) {
        console.log("[Checkout Callback] Signature is wrong", { hash, signature: body.signature });
        return NextResponse.json({ error: "Signature is wrong" });
      }
    }

    const order = await prisma.order.findFirst({
      where: {
        id: parseInt(body.order_id),
      },
    });

    if (!order) {
      return NextResponse.json({ error: "Order is not found" });
    }

    const isSucceeded = body.response_status === "success" && body.order_status === 'approved';

    await prisma.order.update({
      where: {
        id: parseInt(body.order_id),
      },
      data: {
        status: isSucceeded ? OrderStatus.SUCCEEDED : OrderStatus.CANCELLED,
      }
    });

    const items = JSON.parse(order?.items as string) as CartItemDTO[];

    if (isSucceeded) {
      await sendEmail(
        order.email,
        "Next Pizza / –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ üéâ",
        OrderSuccessTemplate({ orderId: order.id, items }) as ReactNode,
      );
    } else {
      console.log("[Checkout Callback] Error: –û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–∞");
      // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–∏—Å—Ç –ø—Ä–æ –Ω–µ—É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É - –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("[Checkout Callback] Error", error);
    return NextResponse.json({ error: "Server error" });
  }
}